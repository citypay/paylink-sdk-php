<?php
/**
 * CardHolder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Paylink API
 *
 * API for creating payments with CityPay's Paylink system.
 *
 * OpenAPI spec version: 3.1
 * Contact: support@citypay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CardHolder Class Doc Comment
 *
 * @category Class
 * @description Cardholder fields are used to identify the underlying cardholder processing the transaction. These values are optional and the user can complete these values on the online form.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CardHolder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CardHolder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\Swagger\Client\Model\Address',
        'email' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'mobile' => 'string',
        'title' => 'string',
        'accept_headers' => 'string',
        'remote_addr' => 'string',
        'user_agent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'email' => 'email',
        'first_name' => null,
        'last_name' => null,
        'mobile' => null,
        'title' => null,
        'accept_headers' => null,
        'remote_addr' => null,
        'user_agent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'email' => 'email',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'mobile' => 'mobile',
        'title' => 'title',
        'accept_headers' => 'acceptHeaders',
        'remote_addr' => 'remoteAddr',
        'user_agent' => 'userAgent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'mobile' => 'setMobile',
        'title' => 'setTitle',
        'accept_headers' => 'setAcceptHeaders',
        'remote_addr' => 'setRemoteAddr',
        'user_agent' => 'setUserAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'mobile' => 'getMobile',
        'title' => 'getTitle',
        'accept_headers' => 'getAcceptHeaders',
        'remote_addr' => 'getRemoteAddr',
        'user_agent' => 'getUserAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['accept_headers'] = isset($data['accept_headers']) ? $data['accept_headers'] : null;
        $this->container['remote_addr'] = isset($data['remote_addr']) ? $data['remote_addr'] : null;
        $this->container['user_agent'] = isset($data['user_agent']) ? $data['user_agent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email field is used to for the payment card holder's email address. This field is used to send a receipt from the Paylink service direct to the payment card holder. In any given token request, the email address for the payment card holder may be pre-populated through this request or collected through the Paylink Payment Form.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The field refers to the first name of the card holder.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The field refers to the last name of the card holder.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile The `mobile` field refers to a known mobile number of the card holder. This can be used for Data collection via the Paylink Payment Form; or optionally sending an SMS message on completion of a transaction to the mobile number. This feature is a licensable option and is not configured by default.
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The field refers to the title of the card holder.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets accept_headers
     *
     * @return string
     */
    public function getAcceptHeaders()
    {
        return $this->container['accept_headers'];
    }

    /**
     * Sets accept_headers
     *
     * @param string $accept_headers The `acceptHeaders` field may be used to specify the accept headers string generated by the cardholder's browser. This field may be used to lock the Paylink Payment Form to the cardholder's browser, preventing the use of a different browser to or protecting from a potential malicious hijacking attempt.
     *
     * @return $this
     */
    public function setAcceptHeaders($accept_headers)
    {
        $this->container['accept_headers'] = $accept_headers;

        return $this;
    }

    /**
     * Gets remote_addr
     *
     * @return string
     */
    public function getRemoteAddr()
    {
        return $this->container['remote_addr'];
    }

    /**
     * Sets remote_addr
     *
     * @param string $remote_addr The `remoteAddr` field may be used to specify the remote IP address of the customer's browser. This field may be used to lock the payment process to the shopper by referencing the IP Address from which the original requests emanate. Should the shopper use a different source address or a malicious third party was to attempt to hijack the transaction, an error will be generated. While locking a Payment transaction to an IP Address may reduce the risk of transaction hijacking, customers that access may change their IP addresses as part of their IPSP service. This option should be only used for paranoid requests.
     *
     * @return $this
     */
    public function setRemoteAddr($remote_addr)
    {
        $this->container['remote_addr'] = $remote_addr;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string $user_agent The `userAgent` field may be used to specify the user agent string generated by the cardholder's browser. This field may be used to lock the Paylink Payment Form to the cardholder's browser, preventing the use of a different browser to or protecting from a potential malicious hijacking attempt. Note: Some browsers may vary this value depending on installed plugins. Paylink only supports static values.
     *
     * @return $this
     */
    public function setUserAgent($user_agent)
    {
        $this->container['user_agent'] = $user_agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


