<?php
/**
 * TokenRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Paylink API
 *
 * API for creating payments with CityPay's Paylink system.
 *
 * OpenAPI spec version: 3.1
 * Contact: support@citypay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TokenRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TokenRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TokenRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchant_id' => 'int',
        'licence_key' => 'string',
        'amount' => 'int',
        'client_version' => 'string',
        'email' => 'string',
        'identifier' => 'string',
        'test' => 'string',
        'cardholder' => '\Swagger\Client\Model\CardHolder',
        'config' => '\Swagger\Client\Model\Config',
        'account_no' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchant_id' => null,
        'licence_key' => null,
        'amount' => null,
        'client_version' => null,
        'email' => 'email',
        'identifier' => null,
        'test' => null,
        'cardholder' => null,
        'config' => null,
        'account_no' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchantId',
        'licence_key' => 'licenceKey',
        'amount' => 'amount',
        'client_version' => 'clientVersion',
        'email' => 'email',
        'identifier' => 'identifier',
        'test' => 'test',
        'cardholder' => 'cardholder',
        'config' => 'config',
        'account_no' => 'accountNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_id' => 'setMerchantId',
        'licence_key' => 'setLicenceKey',
        'amount' => 'setAmount',
        'client_version' => 'setClientVersion',
        'email' => 'setEmail',
        'identifier' => 'setIdentifier',
        'test' => 'setTest',
        'cardholder' => 'setCardholder',
        'config' => 'setConfig',
        'account_no' => 'setAccountNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
        'licence_key' => 'getLicenceKey',
        'amount' => 'getAmount',
        'client_version' => 'getClientVersion',
        'email' => 'getEmail',
        'identifier' => 'getIdentifier',
        'test' => 'getTest',
        'cardholder' => 'getCardholder',
        'config' => 'getConfig',
        'account_no' => 'getAccountNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['licence_key'] = isset($data['licence_key']) ? $data['licence_key'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['client_version'] = isset($data['client_version']) ? $data['client_version'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['cardholder'] = isset($data['cardholder']) ? $data['cardholder'] : null;
        $this->container['config'] = isset($data['config']) ? $data['config'] : null;
        $this->container['account_no'] = isset($data['account_no']) ? $data['account_no'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['identifier']) && (mb_strlen($this->container['identifier']) > 50)) {
            $invalidProperties[] = "invalid value for 'identifier', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['identifier']) && (mb_strlen($this->container['identifier']) < 5)) {
            $invalidProperties[] = "invalid value for 'identifier', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['account_no']) && (mb_strlen($this->container['account_no']) > 20)) {
            $invalidProperties[] = "invalid value for 'account_no', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id The merchant id that you wish to process this transaction with. You may be provided with one or more merchant ids when signing up for an account.
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets licence_key
     *
     * @return string
     */
    public function getLicenceKey()
    {
        return $this->container['licence_key'];
    }

    /**
     * Sets licence_key
     *
     * @param string $licence_key The licenceKey field is used to identify the configured version of the Paylink service that is being run.
     *
     * @return $this
     */
    public function setLicenceKey($licence_key)
    {
        $this->container['licence_key'] = $licence_key;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount The amount field is used to specify the intended value of the transaction in the lowest denomination with no spacing characters or decimal point. This is the net total to be processed. An example of Â£74.95 would be presented as 7495.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets client_version
     *
     * @return string
     */
    public function getClientVersion()
    {
        return $this->container['client_version'];
    }

    /**
     * Sets client_version
     *
     * @param string $client_version The clientVersion field is used to specify the version of your application that has invoked the payment process. This feature is typically used for tracing issues relating to application deployments, or any Paylink integration module or plugin.
     *
     * @return $this
     */
    public function setClientVersion($client_version)
    {
        $this->container['client_version'] = $client_version;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email field is used for the Merchant to be notified on completion of the transaction. The value may be supplied to override the default stored value. Emails sent to this address by the Paylink service should not be forwarded on to the cardholder as it may contain certain information that is used by the Paylink service to validate and authenticate Paylink Token Requests: for example, the Merchant MID and the licence key.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier The identifier field is used to identify a particular transaction linked to a Merchant account. The identifier should be unique to prevent payment card processing attempts from being rejected due to duplication.
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        if (!is_null($identifier) && (mb_strlen($identifier) > 50)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling TokenRequest., must be smaller than or equal to 50.');
        }
        if (!is_null($identifier) && (mb_strlen($identifier) < 5)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling TokenRequest., must be bigger than or equal to 5.');
        }

        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets test
     *
     * @return string
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param string $test The test field specifies mode of the transaction as  *true*: the transaction will be processed as if it was a live transaction however authorisation will be performed by the CityPay Test Authorisation System to enable comprehensive systems integration testing.  *false*: the transaction will be processed and authorised using an upstream Payment Card Acquirer such that, on a successful transaction, the relevant Payment Card Holder Account will be deducted the amount of the transaction on authorisation and the Merchant credited.  If no value is supplied then a request is assumed to be a test transaction by default.
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets cardholder
     *
     * @return \Swagger\Client\Model\CardHolder
     */
    public function getCardholder()
    {
        return $this->container['cardholder'];
    }

    /**
     * Sets cardholder
     *
     * @param \Swagger\Client\Model\CardHolder $cardholder cardholder
     *
     * @return $this
     */
    public function setCardholder($cardholder)
    {
        $this->container['cardholder'] = $cardholder;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \Swagger\Client\Model\Config
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \Swagger\Client\Model\Config $config config
     *
     * @return $this
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets account_no
     *
     * @return string
     */
    public function getAccountNo()
    {
        return $this->container['account_no'];
    }

    /**
     * Sets account_no
     *
     * @param string $account_no The accountNo field is used to specify a Client unique account number that the Paylink service should use when creating a Cardholder Account. The value of the accountNo field is an alpha-numeric string generated by the Merchant and should be no longer than 20 characters in length.
     *
     * @return $this
     */
    public function setAccountNo($account_no)
    {
        if (!is_null($account_no) && (mb_strlen($account_no) > 20)) {
            throw new \InvalidArgumentException('invalid length for $account_no when calling TokenRequest., must be smaller than or equal to 20.');
        }

        $this->container['account_no'] = $account_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


